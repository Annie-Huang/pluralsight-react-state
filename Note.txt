Managing React State
https://app.pluralsight.com/library/courses/react-state-managing/table-of-contents

https://github.com/Annie-Huang/pluralsight-react-state
source file is from the pluralsight zip.

https://reactjs.org/docs/error-boundaries.html
https://github.com/typicode/json-server
https://medium.com/codingthesmartway-com-blog/create-a-rest-api-with-json-server-36da8680136d
https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator << same as optinal chaining in typescript.
https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html
https://reactjs.org/docs/legacy-event-pooling.html
======================================

C:\react\pluralsight-react-state>npm install
C:\react\pluralsight-react-state>npm run start

http://localhost:3000/
http://localhost:3000/shoes
http://localhost:3000/shoes2    << page not found
http://localhost:3000/shoes/1
http://localhost:3000/cart

http://localhost:3001/products  << product list

"start-api": "json-server --port 3001 --watch db.json --delay 0",   << change the delay value to cause longer delay 1000

========================================================

Uncontrolled component: React isn't controlling the selected value
    <select id="size">
Controlled component:
    <select id="size" value={size}>     << Now the select is a controlled component. (React controls the selected value).

React Event Handlers:
--------------------------
onClick
onChange
onHover
onBlur
onSubmit
onMouseover
etc...

When does React Render?
--------------------------
- state change      << Can skip render via: shouldComponentUpdate, React.memo (that say, this optimazation are rarely necessary)
- prop change       << Can skip render via: shouldComponentUpdate, React.memo, PureComponent (that say, this optimazation are rarely necessary)
- parent renders    << the same as prop change
- context change
- React won't re-render when a plain variable changes

Four ways to handle http calls:
------------------------------------------
- inline                    Call fetch/axios/etc in your component | Not recommended
- Centralized functions     Call separate function
- Custom hook               Create and call your own custom hook
- Library                   Call library (react-query, swr, etc)


Error boundaries do not catch errors for:
------------------------------------------------
Event handlers (learn more)
Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)
Server side rendering
Errors thrown in the error boundary itself (rather than its children)

The way to get around the last bit is to continue to throw error when you catch error:
  const { data: products, loading, error } = useFetchAll(urls);
  if (error) throw error;



'react-router-dom' got:
--------------------------
useParams       << to get parameters value
useNavigate
    const navigate = useNavigate();
    <button className="btn btn-primary" onClick={() => navigate('/cart')}>Add to cart</button>

Link:           << use in template
    <Link to='/'>
      <img alt="Carved Rock Fitness" src="/images/logo.png" />
    </Link>
NavLink         << use in template
     <NavLink activeStyle={activeStyle} to='/shoes'>Shoes</NavLink>


Where to Declare State
-----------------------------
Common mistake: declaring state in the wrong spot
Sign: Hard to consume and share
Suggestion: Start local, and lift when needed
    - Declare state in the component that needs it.
    - Child components need the state --> Pass state down via props
    - Non-child components need it --> Lift state to common parent.
    - Passing props getting annoying --> Consider context, Redux, etc.


Why is Settings state Async?
----------------------------------
Batching: Batching improve performance by reducing re-render
Support async rendering: E.g. Typing a textbox is high priority. Display an API call response is lower priority


!!!!! Use Function Form to Reference Existing state
---------------------------------------------------
const [count, setCount] = useState(0);

// Avoid since unreliable
setCount(count + 1);

// Prefer this – Use a function to reference existing state
setCount((count) => count + 1);


!!!!! Warning: Shallow Copies
-------------------------------------------------------
const user = { name: 'Cory’, address: { state: 'California’ } }

// Watch out, it didn't clone the nested address object!
const userCopy = { ...user };

// This clones the nested address object too
const userCopy = { ...user, address: {...user.address}}


Form validation in React:
---------------------------------
Where to display errors By field, at top                << by field and at top
When to display errors onSubmit, onBlur, onChange       << all three
When to disable submit Until clean, submitting, never   << choose to do while submitting
When to revalidate onSubmit, onChange, onBlur           << all three

State that we need:
touched         What fields have been touched?      << stored as "touched"
submitted       Has the form been submitted?        << stored as "status"
isSubmitting    Is a form submission in progress?   << (same as above)
isValid         Is the form currently valid?        << derive
errors          What are the errors for each field? << (same as above)
dirty           Has the form changed?               << (same as above)

// Using a single status “enum” instead     << enum is a typescript concept, but you can create a js version, using object.
const STATUS = {
  IDLE: "IDLE",
  SUBMITTING: "SUBMITTING",
  SUBMITTED: "SUBMITTED",
  COMPLETED: "COMPLETED",
}
const [status, setStatus] = useState(STATUS.IDLE);      << the form can only be one discrete states at a time.


Finite State Machine:
------------------------------
Only one state can be active at the same time. The machine transitions from one state to another.
- XState. open source Finite State Machine











